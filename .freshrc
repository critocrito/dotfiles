# Otherwise $HOME is not recognized in fresh-options
ROOT=$HOME
BIN_DIR=$HOME/.local/bin

if [[ "$(uname)" == "Darwin" ]]
then
  CONFIG_DIR=$HOME/Library/Preferences/
  CACHE_DIR=$HOME/Library/Caches/
  DATA_DIR=$HOME/Library/
else
  CONFIG_DIR=$XDG_CONFIG_HOME
  CACHE_DIR=$XDG_CACHE_HOME
  DATA_DIR=$XDG_DATA_HOME
fi

for D in $BIN_DIR $CONFIG_DIR $CACHE_DIR
do
  mkdir -p $D
done

fresh freshshell/fresh bin/fresh --bin=$BIN_DIR/fresh

# Set up the basic shell. This should be first.
fresh-options --file=~/.env --ignore-missing
  fresh shell/env.$(uname)
  fresh shell/env
fresh-options
for F in aliases profile functions; do fresh shell/$F --file; done

# $HOME/.pam_environment, systemd and xdg user dirs exist on Linux.
if [[ "$(uname)" == "Linux" ]]
then
  fresh pam_environment --file
  for MOD in ssh dbus; do fresh $MOD/pam_environment --file; done
  fresh systemd/aliases --file
  mkdir -p $CONFIG_DIR/systemd/user
  fresh xdg/user-dirs.dirs --file=$CONFIG_DIR/user-dirs.dirs
fi

# SSH
fresh-options --file=~/.env --ignore-missing
  fresh ssh/env.$(uname)
  fresh ssh/env
fresh-options

# git
fresh git/gitconfig --file
fresh git/git-prompt.rc --file
for F in aliases env functions; do fresh git/$F --file; done

# gnupg
for F in env rc; do fresh gnupg/$F --file; done
for F in dirmngr.conf gpg.conf sks-keyservers.netCA.pem
do
  fresh gnupg/$F --file=$HOME/.gnupg/$F
done
fresh-options --file=$HOME/.gnupg/gpg-agent.conf --ignore-missing
  fresh gnupg/gpg-agent.conf
  fresh gnupg/gpg-agent.conf.$(uname)
fresh-options

for F in aliases env; do fresh grep/$F --file; done

for F in aliases functions; do fresh emacs/$F --file; done

for F in functions zprofile zshenv zshrc; do fresh zsh/$F --file; done

# mail setup
mkdir -p $CONFIG_DIR/offlineimap $CACHE_DIR/msmtp $DATA_DIR/msmtp
for F in mailcap aliases env; do fresh mail/$F --file; done
fresh mail/offlineimaprc --file=$CONFIG_DIR/offlineimap/offlineimaprc
fresh mail/helpers.py --file=$CONFIG_DIR/offlineimap/helpers.py
fresh mail/mail-hook --bin=$CONFIG_DIR/offlineimap/mail-hook
fresh mail/notmuchrc --file=$CONFIG_DIR/notmuch/notmuchrc
fresh mail/msmtprc --file=$CONFIG_DIR/msmtp/msmtprc
fresh mail/msmtp-runqueue --bin=$BIN_DIR/msmtp-runqueue
fresh mail/msmtp-listqueue --bin=$BIN_DIR/msmtp-listqueue
fresh mail/msmtp-enqueue --bin=$BIN_DIR/msmtp-enqueue

# xorg
if [[ "$(uname)" == "Linux" ]]
then
  mkdir -p $CONFIG_DIR/xorg
  for F in resources modmap; do fresh xorg/$F --file=$CONFIG_DIR/xorg/$F; done
  for F in xserverrc xinitrc; do fresh xorg/$F --file; done
elif [[ "$(uname)" == "Darwin" ]]
then
  fresh xorg/resources --file=$HOME/.Xresources
  fresh xorg/modmap --file=$HOME/.Xmodmap
fi

# xmonad
if [[ "$(uname)" == "Linux" ]]
then
  for DIR in $CACHE_DIR $DATA_DIR; do mkdir -p $DIR/xmonad; done
  fresh xmonad --file=$CONFIG_DIR/xmonad/
  fresh bin/get-volume --bin=$BIN_DIR/get-volume
fi

for F in rc profile functions; do fresh haskell/$F --file; done

# Install or upgrade nvm
NVM_DIR="$HOME/.nvm"
if [ -d $NVM_DIR ]
then
  echo "Upgrading nvm."
  cd "$NVM_DIR"
  git fetch origin
  git checkout `git describe --abbrev=0 --tags --match "v[0-9]*" origin`
else
  echo "Installing nvm."
  git clone https://github.com/creationix/nvm.git "$NVM_DIR"
  cd "$NVM_DIR"
  git checkout `git describe --abbrev=0 --tags --match "v[0-9]*" origin`
fi
cd
for F in rc env functions; do fresh node/$F --file; done


# Install or upgrade pyenv
PYENV_ROOT="$HOME/.pyenv"
if [ -s $PYENV_ROOT ]
then
  echo "Upgrading pyenv."
  cd $PYENV_ROOT
  git pull
  echo "Upgrading pyenv-virtualenv."
  cd $PYENV_ROOT/plugins/pyenv-virtualenv
  git pull
else
  echo "Installing pyenv."
  git clone https://github.com/pyenv/pyenv.git $PYENV_ROOT
  echo "Installing pyenv-virtualenv."
  git clone https://github.com/pyenv/pyenv-virtualenv.git $PYENV_ROOT/plugins/pyenv-virtualenv
fi
cd
for F in rc profile env functions; do fresh python/$F --file; done


# git super status
GIT_SUPER_STATUS_DIR=$HOME/.git-super-status
compile_git_super_status() {
  cd $GIT_SUPER_STATUS_DIR
  stack setup
  stack build && stack install
  cp $GIT_SUPER_STATUS_DIR/src/.bin/gitstatus $BIN_DIR
  cd -
}
if [ -s $GIT_SUPER_STATUS_DIR ]
then
  echo "Upgrading git-super-status"
  cd $GIT_SUPER_STATUS_DIR
  git pull
  # FIXME: Only compile if changes got pulled
  # compile_git_super_status
else
  echo "Installing git-super-status"
  git clone https://github.com/olivierverdier/zsh-git-prompt.git $GIT_SUPER_STATUS_DIR
  compile_git_super_status
fi
