# Load all shell functions.
for F in functions git git-super-status
do
  source $FRESH_LOCAL/fresh/$F.sh
done

# Configure home. Export variables that need to be accessible in erb templates.
if is_mac
then
  CONFIG_DIR=$HOME/Library/Preferences/
  CACHE_DIR=$HOME/Library/Caches/
  DATA_DIR=$HOME/Library/
else
  export CONFIG_DIR=$XDG_CONFIG_HOME
  CACHE_DIR=$XDG_CACHE_HOME
  DATA_DIR=$XDG_DATA_HOME
fi
export DOTFILE_DIR=$FRESH_LOCAL
FRESH_BIN_PATH=$HOME/.local/bin
SYSTEMD_DIR=$CONFIG_DIR/systemd/user
GIT_SUPER_STATUS_DIR=$HOME/.git-super-status
NVM_DIR=$HOME/.nvm
PYENV_ROOT=$HOME/.pyenv
RBENV_ROOT=$HOME/.rbenv

# Ensure all required directories.
for D in $FRESH_BIN_PATH $CONFIG_DIR $CACHE_DIR $DATA_DIR
do
  mkdir -p $D
done

# Ensure home directory structure
if is_linux
then
  for D in bkp doc img old snd spool src tmp vid www; do mkdir -p $HOME/$D; done
  mkdir -p $SYSTEMD_DIR
fi

fresh freshshell/fresh bin/fresh --bin

# Configure shell environment
for F in functions env aliases profile rc
do
  fresh-options --file=~/.$F --ignore-missing --marker
  for T in shell zsh ssh git grep mail gnupg emacs systemd rtorrent \
           node python haskell android ruby fzf
  do
    fresh $T/$F.$(uname)
    fresh $T/$F
  done
  fresh-options
done

# $HOME/.pam_environment, systemd and xdg user dirs exist on Linux.
if is_linux
then
  fresh pam_environment --file
  for MOD in ssh dbus; do fresh $MOD/pam_environment --file; done
  mkdir -p $CONFIG_DIR/systemd/user
  # fresh xdg/user-dirs.dirs --file=$CONFIG_DIR/user-dirs.dirs
fi

# git
fresh git/gitconfig --file
fresh git/gitignore --file
fresh git/git-prompt.rc --file

# gnupg
for F in dirmngr.conf gpg.conf sks-keyservers.netCA.pem
do
  fresh gnupg/$F --file=$HOME/.gnupg/$F
done
fresh-options --file=$HOME/.gnupg/gpg-agent.conf --ignore-missing
  fresh gnupg/gpg-agent.conf
  fresh gnupg/gpg-agent.conf.$(uname)
fresh-options

# Emacs
# See https://emacsformacosx.com/tips
# brew install --with-cocoa --srgb emacs
# brew services start emacs
# brew linkapps emacs
if is_mac
then
  ln -sf /Applications/Emacs.app/Contents/MacOS/bin/emacsclient $FRESH_BIN_PATH/emacsclient
  fresh-options --bin
    fresh emacs/emacs
    fresh emacs/ec
  fresh-options
fi

# ZSH
for F in zprofile zshenv zshrc; do fresh zsh/$F --file; done

# mail setup
mkdir -p $CONFIG_DIR/offlineimap $CACHE_DIR/msmtp $DATA_DIR/msmtp
fresh mail/helpers.py --file=$CONFIG_DIR/offlineimap/helpers.py
for F in mailcap; do fresh mail/$F --file; done
for M in cryptodrunks cryptodrunks2 ttc
do
  fresh mail/offlineimaprc.$M --file=$CONFIG_DIR/offlineimap/offlineimaprc.$M
done

for I in cryptodrunks cryptodrunks2 ttc
do
  fresh mail/mail-hook-$I --bin=$CONFIG_DIR/offlineimap/mail-hook-$I
done

fresh mail/notmuchrc --file=$CONFIG_DIR/notmuch/notmuchrc
fresh mail/msmtprc --file=$CONFIG_DIR/msmtp/msmtprc
for B in msmtp-runqueue msmtp-listqueue msmtp-enqueue
do
  fresh mail/$B --bin
done

# beets music collection
fresh beets/config.yaml --file=$CONFIG_DIR/beets/config.yaml

# xorg
if is_linux
then
  mkdir -p $CONFIG_DIR/xorg
  for F in resources modmap; do fresh xorg/$F --file=$CONFIG_DIR/xorg/$F; done
  for F in xserverrc xinitrc; do fresh xorg/$F --file; done

  mkdir -p $SYSTEMD_DIR/xorg@.target.{requires,wants}

  for F in xmodmap@.service xmonad@.service xorg@.target xresources@.service; do
    fresh xorg/systemd/$F --file=$SYSTEMD_DIR/$F;
  done
  ln -sf $SYSTEMD_DIR/xmonad@.service $SYSTEMD_DIR/xorg@.target.requires/
  ln -sf $SYSTEMD_DIR/xresources@.service $SYSTEMD_DIR/xorg@.target.wants/
  ln -sf $SYSTEMD_DIR/xmodmap@.service $SYSTEMD_DIR/xorg@.target.wants/
  systemctl --user daemon-reload

  # xmonad
  for DIR in $CACHE_DIR $DATA_DIR; do mkdir -p $DIR/xmonad; done
  fresh xmonad/build.erb --bin=$CONFIG_DIR/xmonad/build --filter=erb
  for F in xmobarrc; do fresh xmonad/$F --file=$CONFIG_DIR/xmonad/$F; done
  fresh bin/get-volume --bin
elif is_mac
then
  fresh xorg/resources --file=$HOME/.Xresources
  fresh xorg/modmap --file=$HOME/.Xmodmap
fi

# clojure
for F in boot lein
do
  fresh clojure/$F --bin
done
fresh clojure/profile.boot --file=$HOME/.boot/profile.boot
fresh clojure/profiles.clj --file=$HOME/.lein/profiles.clj

# nodejs
# fresh node/npmrc --file

# tmux
fresh tmux/tmux.conf --file

# External dependencies
git_clone_or_pull_tag https://github.com/creationix/nvm.git $NVM_DIR
git_clone_or_pull_tag https://github.com/pyenv/pyenv.git $PYENV_ROOT
git_clone_or_pull_tag https://github.com/pyenv/pyenv-virtualenv.git $PYENV_ROOT/plugins/pyenv-virtualenv
git_clone_or_pull_tag https://github.com/rbenv/rbenv.git $RBENV_ROOT
git_clone_or_pull_tag https://github.com/rbenv/ruby-build.git $RBENV_ROOT/plugins/ruby-build

git_has_pullable_master $GIT_SUPER_STATUS_DIR
retval=$?
echo $retval
if [ "$retval" = 0 ];
then
  git_clone_or_pull_master https://github.com/olivierverdier/zsh-git-prompt.git $GIT_SUPER_STATUS_DIR
  compile_git_super_status $GIT_SUPER_STATUS_DIR
fi
