# Ensure home directory structure
for D in bkp doc img old snd spool src tmp vid www; do mkdir -p $HOME/$D; done

# Load all shell functions.
for F in functions git-super-status
do
  source $FRESH_LOCAL/fresh/$F.sh
done

# Configure home.
if is_mac
then
  CONFIG_DIR=$HOME/Library/Preferences/
  CACHE_DIR=$HOME/Library/Caches/
  DATA_DIR=$HOME/Library/
else
  CONFIG_DIR=$XDG_CONFIG_HOME
  CACHE_DIR=$XDG_CACHE_HOME
  DATA_DIR=$XDG_DATA_HOME
fi
FRESH_BIN_PATH=$HOME/.local/bin
GIT_SUPER_STATUS_DIR=$HOME/.git-super-status
NVM_DIR=$HOME/.nvm
PYENV_ROOT=$HOME/.pyenv

# Ensure all required directories.
for D in $FRESH_BIN_PATH $CONFIG_DIR $CACHE_DIR $DATA_DIR
do
  mkdir -p $D
done

fresh freshshell/fresh bin/fresh --bin

fresh-options --file=~/.functions --ignore-missing --marker
for T in shell git emacs zsh node python
do
  fresh $T/functions.$(uname)
  fresh $T/functions
done
fresh-options

# Set all environment variables.
fresh-options --file=~/.env --ignore-missing --marker
for T in shell ssh git grep mail gnupg node python
do
  fresh $T/env.$(uname)
  fresh $T/env
done
fresh-options

# Setup the shell profile.
fresh-options --file=~/.profile --ignore-missing --marker
for T in shell haskell python
do
  fresh $T/profile
done
fresh-options

# Configure shell aliases
fresh-options --file=~/.aliases --ignore-missing --marker
for T in shell git grep emacs mail ruby node
do
  fresh $T/aliases.$(uname)
  fresh $T/aliases
done

if is_linux
then
  for T in systemd rtorrent
  do
    fresh $T/aliases.$(uname)
    fresh $T/aliases
  done
fi
fresh-options

# $HOME/.pam_environment, systemd and xdg user dirs exist on Linux.
if is_linux
then
  fresh pam_environment --file
  for MOD in ssh dbus; do fresh $MOD/pam_environment --file; done
  mkdir -p $CONFIG_DIR/systemd/user
  fresh xdg/user-dirs.dirs --file=$CONFIG_DIR/user-dirs.dirs
fi

# git
fresh git/gitconfig --file
fresh git/git-prompt.rc --file

# gnupg
fresh gnupg/rc --file
for F in dirmngr.conf gpg.conf sks-keyservers.netCA.pem
do
  fresh gnupg/$F --file=$HOME/.gnupg/$F
done
fresh-options --file=$HOME/.gnupg/gpg-agent.conf --ignore-missing
  fresh gnupg/gpg-agent.conf
  fresh gnupg/gpg-agent.conf.$(uname)
fresh-options

# Emacs
# See https://emacsformacosx.com/tips
# brew install --with-cocoa --srgb emacs
# brew services start emacs
# brew linkapps emacs
if is_mac
then
  ln -sf /Applications/Emacs.app/Contents/MacOS/bin/emacsclient $FRESH_BIN_PATH/emacsclient
  fresh-options --bin
    fresh emacs/emacs
    fresh emacs/ec
  fresh-options
fi

# ZSH
for F in zprofile zshenv zshrc; do fresh zsh/$F --file; done

# mail setup
mkdir -p $CONFIG_DIR/offlineimap $CACHE_DIR/msmtp $DATA_DIR/msmtp
fresh mail/helpers.py --file=$CONFIG_DIR/offlineimap/helpers.py
for F in mailcap; do fresh mail/$F --file; done
for M in cryptodrunks cryptodrunks2 ttc
do
  fresh mail/offlineimaprc.$M --file=$CONFIG_DIR/offlineimap/offlineimaprc.$M
done

for I in cryptodrunks cryptodrunks2 ttc
do
  fresh mail/mail-hook-$I --bin=$CONFIG_DIR/offlineimap/mail-hook-$I
done

fresh mail/notmuchrc --file=$CONFIG_DIR/notmuch/notmuchrc
fresh mail/msmtprc --file=$CONFIG_DIR/msmtp/msmtprc
for B in msmtp-runqueue msmtp-listqueue msmtp-enqueue
do
  fresh mail/$B --bin
done

# beets music collection
fresh beets/config.yaml --file=$CONFIG_DIR/beets/config.yaml

# xorg
if is_linux
then
  mkdir -p $CONFIG_DIR/xorg
  for F in resources modmap; do fresh xorg/$F --file=$CONFIG_DIR/xorg/$F; done
  for F in xserverrc xinitrc; do fresh xorg/$F --file; done
elif is_mac
then
  fresh xorg/resources --file=$HOME/.Xresources
  fresh xorg/modmap --file=$HOME/.Xmodmap
fi

# xmonad
if is_linux
then
  for DIR in $CACHE_DIR $DATA_DIR; do mkdir -p $DIR/xmonad; done
  fresh xmonad --file=$CONFIG_DIR/xmonad/
  fresh bin/get-volume --bin
fi

for F in rc functions; do fresh haskell/$F --file; done

# Install or upgrade nvm
if [ -d $NVM_DIR ]
then
  echo "Upgrading nvm."
  cd "$NVM_DIR"
  git fetch origin
  git checkout `git describe --abbrev=0 --tags --match "v[0-9]*" origin`
else
  echo "Installing nvm."
  git clone https://github.com/creationix/nvm.git "$NVM_DIR"
  cd "$NVM_DIR"
  git checkout `git describe --abbrev=0 --tags --match "v[0-9]*" origin`
fi
cd
for F in npmrc rc; do fresh node/$F --file; done

# Install or upgrade pyenv
if [ -s $PYENV_ROOT ]
then
  echo "Upgrading pyenv."
  cd $PYENV_ROOT
  git pull
  echo "Upgrading pyenv-virtualenv."
  cd $PYENV_ROOT/plugins/pyenv-virtualenv
  git pull
else
  echo "Installing pyenv."
  git clone https://github.com/pyenv/pyenv.git $PYENV_ROOT
  echo "Installing pyenv-virtualenv."
  git clone https://github.com/pyenv/pyenv-virtualenv.git $PYENV_ROOT/plugins/pyenv-virtualenv
fi
cd
for F in rc profile env functions; do fresh python/$F --file; done

# git super status
git_super_status $GIT_SUPER_STATUS_DIR
