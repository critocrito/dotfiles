servers = (
  # {
  #   address = "irc.freenode.net";
  #   chatnet = "Freenode";
  #   port = "6697";
  #   use_ssl = "yes";
  #   ssl_verify = "yes";
  #   autoconnect = "yes";
  # },
  {
    address = "localhost";
    chatnet = "Bitlbee";
    port = "6667";
    use_ssl = "no";
    ssl_verify = "no";
    autoconnect = "yes";
  }
);
# I'm a freenode user all the way man
chatnets = {
  Freenode = {
    type = "IRC";
    nick = "critio";
    autosendcmd = "/msg nickserv identify futu:u9Dai";
  };
  Bitlbee = { type = "IRC"; };
};

# Channels I hang out in a lot. Change these to your own.
channels = (
  { name = "#node.js"; chatnet = "Freenode"; autojoin = "yes"; },
  { name = "#clojure"; chatnet = "Freenode"; autojoin = "yes"; },
  { name = "#haskell"; chatnet = "Freenode"; autojoin = "yes"; },
  {
    name = "&bitlbee";
    chatnet = "bitlbee";
    autojoin = "yes";
    password = "";
    #autosendcmd = "/msg &bitlbee identify futu:u9Dai";
    #autosendcmd = "/say identify; /oper";
  }
);

aliases = {
  J = "join";
  WJOIN = "join -window";
  WQUERY = "query -window";
  LEAVE = "part";
  BYE = "quit";
  EXIT = "quit";
  SIGNOFF = "quit";
  DESCRIBE = "action";
  DATE = "time";
  HOST = "userhost";
  LAST = "lastlog";
  SAY = "msg *";
  WI = "whois";
  WII = "whois -zsh -zsh";
  WW = "whowas";
  W = "who";
  N = "names";
  M = "msg";
  T = "topic";
  C = "clear";
  CL = "clear";
  K = "kick";
  KB = "kickban";
  KN = "knockout";
  BANS = "ban";
  B = "ban";
  MUB = "unban *";
  UB = "unban";
  IG = "ignore";
  UNIG = "unignore";
  SB = "scrollback";
  UMODE = "mode ";
  WC = "window close";
  WN = "window new hide";
  SV = "say Irssi  () - http://irssi.org/";
  GOTO = "sb goto";
  CHAT = "dcc chat";
  RUN = "SCRIPT LOAD";
  CALC = "exec - if command -v bc >/dev/null 2>&1; then printf '%s=' ''; echo '' | bc -l; else echo bc was not found; fi";
  SBAR = "STATUSBAR";
  INVITELIST = "mode  +I";
  Q = "QUERY";
  "MANUAL-WINDOWS" = "set use_status_window off;set autocreate_windows off;set autocreate_query_level none;set autoclose_windows off;set reuse_unused_windows on;save";
  EXEMPTLIST = "mode  +e";
  ATAG = "WINDOW SERVER";
  UNSET = "set -clear";
  RESET = "set -default";
};

statusbar = {
  # formats:
  # when using {templates}, the template is shown only if it's argument isn't
  # empty unless no argument is given. for example {sb} is printed always,
  # but {sb } is printed only if  isn't empty.

  items = {
    # start/end text in statusbars
    barstart = "{sbstart}";
    barend = "{sbend}";

    topicbarstart = "{topicsbstart}";
    topicbarend = "{topicsbend}";

    # treated "normally", you could change the time/user name to whatever
    time = "{sb }";
    user = "{sb {sbnickmode }{sbmode }{sbaway }}";

    # treated specially .. window is printed with non-empty windows,
    # window_empty is printed with empty windows
    window = "{sb :/{sbmode }}";
    window_empty = "{sb {sbservertag }}";
    prompt = "{prompt 0.14999999999999999itemname}";
    prompt_empty = "{prompt }";
    topic = " ";
    topic_empty = " Irssi v - http://www.irssi.org";

    # all of these treated specially, they're only displayed when needed
    lag = "{sb Lag: -zsh-}";
    act = "{sb Act: -zsh-}";
    more = "-- more --";
  };

  # there's two type of statusbars. root statusbars are either at the top
  # of the screen or at the bottom of the screen. window statusbars are at
  # the top/bottom of each split window in screen.
  # default = {
  # the "default statusbar" to be displayed at the bottom of the window.
  # contains all the normal items.
  #   window = {
  #     disabled = "no";

  # window, root
  #     type = "window";
  # top, bottom
  #     placement = "bottom";
  # number
  #     position = "1";
  # active, inactive, always
  #     visible = "active";

  # list of items in statusbar in the display order
  #     items = {
  #       barstart = { priority = "100"; };
  #       time = { };
  #       user = { };
  #       window = { };
  #       window_empty = { };
  #       lag = { priority = "-1"; };
  #       act = { priority = "10"; };
  #       more = { priority = "-1"; alignment = "right"; };
  #       barend = { priority = "100"; alignment = "right"; };
  #     };
  #   };

  # statusbar to use in inactive split windows
  #   window_inact = {
  #     type = "window";
  #     placement = "bottom";
  #     position = "1";
  #     visible = "inactive";
  #     items = {
  #       barstart = { priority = "100"; };
  #       window = { };
  #       window_empty = { };
  #       more = { priority = "-1"; alignment = "right"; };
  #       barend = { priority = "100"; alignment = "right"; };
  #     };
  #   };

  # we treat input line as yet another statusbar :) It's possible to
  # add other items before or after the input line item.
  #   prompt = {
  #     type = "root";
  #     placement = "bottom";
  #     # we want to be at the bottom always
  #     position = "100";
  #     visible = "always";
  #     items = {
  #       prompt = { priority = "-1"; };
  #       prompt_empty = { priority = "-1"; };
  #       # treated specially, this is the real input line.
  #       input = { priority = "10"; };
  #     };
  #   };

  # topicbar
  #   topic = {
  #     type = "root";
  #     placement = "top";
  #     position = "1";
  #     visible = "always";
  #     items = {
  #       topicbarstart = { priority = "100"; };
  #       topic = { };
  #       topic_empty = { };
  #       topicbarend = { priority = "100"; alignment = "right"; };
  #     };
  #   };
  # };
  default = {
    window = {
      items = {
        barstart = { priority = "100"; };
        time = { };
        user = { };
        window = { };
        window_empty = { };
        lag = { priority = "-1"; };
        more = { priority = "-1"; alignment = "right"; };
        barend = { priority = "100"; alignment = "right"; };
      };
    };
    awl_0 = {
      items = {
        barstart = { priority = "100"; };
        awl_0 = { };
        barend = { priority = "100"; alignment = "right"; };
      };
    };
  };
};
settings = {
  core = { real_name = "Unknown"; user_name = "critio"; nick = "critio"; };
  "fe-text" = { actlist_sort = "refnum"; };
  "fe-common/core" = { autolog = "yes"; };
  "perl/core/scripts" = {
    awl_shared_sbar = "OFF";
    awl_viewer = "no";
    awl_block = "1";
  };
};
logs = { };
