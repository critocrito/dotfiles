#!/bin/sh

BUILD_DIR="$(mktemp -d)"
DOTFILE_DIR="$(pwd)"

usage() {
  echo "Usage: $0 [server|desktop]"
  exit 2
}

except() {
  # $1 -> reason
  echo "Error: $1"
  usage
}

_is_os() {
  [ "$(uname)" = "$1" ]
}
is_mac() {
  _is_os "Darwin"
}
is_linux() {
  _is_os "Linux"
}
is_freebsd() {
  _is_os "FreeBSD"
}
is_openbsd() {
  _is_os "OpenBSD"
}
is_bsd() {
  is_freebsd || is_openbsd
}
is_not_mac() {
  ! is_mac
}
is_not_linux() {
  ! is_linux
}
is_debian_linux() {
  is_linux && [ -f /etc/debian_version ]
}
is_arch_linux() {
  is_linux && [ -f /etc/arch-release ]
}

msg() {
  printf "\r\033[2K\033[0;32m[ .. ] %s\033[0m\n" "$*"
}

git_has_pullable_tag() {
  TARGET="$1"
  RETVAL=1

  if [ ! -d "$TARGET" ]
  then
    RETVAL=0
  else
    cd "$TARGET" || exit

    git fetch origin 1> /dev/null
    LATEST_TAG="$(git describe --abbrev=0 --tags --match 'v[0-9]*' origin)"

    if [ "$(git rev-parse @)" != "$(git rev-parse @\{"$LATEST_TAG"\} 2> /dev/null)" ]
    then
      RETVAL=0
    fi
    cd - 1> /dev/null || exit
  fi

  return "$RETVAL"
}

git_has_pullable_master() {
  TARGET="$1"
  RETVAL=1

  if [ ! -d "$TARGET" ]
  then
    RETVAL=0
  else
    cd "$TARGET" || exit

    git fetch origin 1> /dev/null

    if [ "$(git rev-parse @)" != "$(git rev-parse @\{u\} 2> /dev/null)" ]
    then
      RETVAL=0
    fi

    cd - 1> /dev/null || exit
  fi

  return "$RETVAL"
}

git_clone_or_pull_tag() {
  GIT_URL="$1"
  TARGET="$2"

  if [ ! -d "$TARGET" ]
  then
    msg "Installing $GIT_URL."
    git clone "$GIT_URL" "$TARGET" 2> /dev/null
  fi

  cd "$TARGET" || exit

  git fetch --tags origin 1> /dev/null
  LATEST_TAG="$(git describe --abbrev=0 --tags --match 'v[0-9]*' origin)"

  if [ "$(git rev-parse @)" != "$(git rev-parse @\{$LATEST_TAG\} 2> /dev/null)" ]
  then
    msg "Upgrading $TARGET to $LATEST_TAG"
    git checkout "$LATEST_TAG" 2> /dev/null
  fi

  cd - 1> /dev/null || exit
}

git_clone_or_pull_master() {
  GIT_URL="$1"
  TARGET="$2"

  if [ ! -d "$TARGET" ]
  then
    msg "Installing $GIT_URL."
    git clone "$GIT_URL" "$TARGET" 2> /dev/null
  else
    cd "$TARGET" || exit

    git fetch origin 1> /dev/null

    if [ "$(git rev-parse @)" != "$(git rev-parse @\{u\} 2> /dev/null)" ]
    then
      msg "Upgrading $TARGET to latest master"
      git checkout master 2> /dev/null
    fi

    cd - 1> /dev/null || exit
  fi
}

get_var_or() {
  [ -z "$1" ] && echo "$2" || echo "$1"
}

ensure_build_dir() {
  mkdir -p "$BUILD_DIR/$1"
}

append_to_file() {
  # $1 -> type
  # $2 -> file
  # $3 -> alternate output file name
  source="$DOTFILE_DIR/$1/$2"
  source_os="$source.$(uname)"
  [ -z "$3" ] && target="$BUILD_DIR/.${2#.}" || target="$BUILD_DIR/.${3#.}"

  [ -f "$source" ] && cat "$source" >> "$target"
  [ -f "$source_os" ] && cat "$source_os" >> "$target"
}

install_binary() {
  # $1 -> type
  # $2 -> file
  source="$DOTFILE_DIR/$1/bin/$2"
  source_os="$source.$(uname)"
  target="$BUILD_DIR/.local/bin/${2#.}"

  [ -f "$source" ] && cp "$source" "$target"
  [ -f "$source_os" ] && cp "$source_os" "$target"
}

install_binaries() {
  # $1 -> module
  [ -d "$1/bin" ] && for BIN in "$1"/bin/*; do
    source="$DOTFILE_DIR/$BIN"
    bin_name="$(basename "$BIN")"
    target="$BUILD_DIR/.local/bin/${bin_name#.}"
    cp "$source" "$target"
    chmod +x "$target"
  done
}

install_directory() {
  # $1 -> type
  # $2 -> source
  # $3 -> target
  source="$DOTFILE_DIR/$1/$2"
  target="$BUILD_DIR/$3"

  mkdir -p "$target"

  [ -d "$source" ] && cp -a "$source" "$target"
}

uncallable() {
  ! command -v "$1" > /dev/null
}

uncallable_mac() {
  ! open -Ra "$1" 2> /dev/null
}

install_pkg() {
  # $1 -> pkg name
  if is_mac;
  then
    brew install "$1"
  fi
  if is_freebsd;
  then
    sudo env ASSUME_ALWAYS_YES=yes pkg install "$1"
  fi
  if is_debian_linux;
  then
    sudo apt install -y "$1"
  fi
}

ensure_pkg() {
  # $1 -> cmd
  # $2 -> optional package name
  [ -z "$2" ] && pkg_name="$1" || pkg_name="$2"

  if is_mac;
  then
    if uncallable_mac "$1" && uncallable "$1";
    then
      install_pkg "$pkg_name"
    fi
  else
    if uncallable "$1";
    then
      install_pkg "$pkg_name"
    fi
  fi
}

###
# Parse command line options
###
PROFILE="$1"
PROFILEFILE="profiles/$PROFILE"

if [ ! -f "$PROFILEFILE" ];
then
  except "Unknown profile"
fi

###
# Prepare build directory
###
msg "Building dotfiles in $BUILD_DIR."

# Configure home. Export variables that need to be accessible later on.
if is_mac
then
  CONFIG_DIR=$(get_var_or "$XDG_CONFIG_HOME" "$HOME/Library/Preferences/")
  CACHE_DIR=$(get_var_or "$XDG_CACHE_HOME" "$HOME/Library/Caches/")
  DATA_DIR=$(get_var_or "$XDG_DATA_HOME" "$HOME/Library/")
else
  CONFIG_DIR=$(get_var_or "$XDG_CONFIG_HOME" "$HOME/.config")
  CACHE_DIR=$(get_var_or "$XDG_CACHE_HOME" "$HOME/.cache")
  DATA_DIR=$(get_var_or "$XDG_DATA_HOME" "$HOME/.local/share")
fi

SYSTEMD_DIR="$CONFIG_DIR/systemd/user"
BIN_DIR="$HOME/.local/bin"
BUILD_CONFIG_DIR="${CONFIG_DIR#$HOME/}"
BUILD_CACHE_DIR="${CACHE_DIR#$HOME/}"
BUILD_DATA_DIR="${DATA_DIR#$HOME/}"
BUILD_SYSTEMD_DIR="${SYSTEMD_DIR#$HOME/}"
BUILD_BIN_DIR="${BIN_DIR#$HOME/}"

# Create build directory structure.
for e in "$BUILD_CONFIG_DIR" "$BUILD_CACHE_DIR" "$BUILD_DATA_DIR" "$BUILD_BIN_DIR";
do
  ensure_build_dir "$e"
done
is_linux && ensure_build_dir "$BUILD_SYSTEMD_DIR"

# Directory layout
if [ "$PROFILE" = "desktop" ] && is_not_mac
then
  for D in prj doc spool bkp tmp
  do
    ensure_build_dir "$D"
  done
fi

if [ "$PROFILE" = "desktop" ] && is_mac
then
  for D in Projects Backups Temp
  do
    ensure_build_dir "$D"
  done
fi

# Install all modules for the chosen profile
while read -r MODULE;
do
  msg "Preparing module $MODULE"
  
  # shellcheck source=modules/core/_init
  . "modules/$MODULE/_init" 2> /dev/null

  for F in functions env aliases profile rc;
  do
    append_to_file "modules/$MODULE" "$F"
  done

  install_binaries "modules/$MODULE"

  for FUNC in "_deps" "_install"; do
    if type "$FUNC" 2> /dev/null | grep -q function;
    then
      "$FUNC"
      unset -f "$FUNC"
    fi
  done
done < "$PROFILEFILE"

# Modules:
#
# Server profile: core, git, zsh??, tmux-server, fzf, exa
#
# Desktop profile: core, git, zsh, tmux, fzf, exa, gnupg, clojure, nodejs,
# python, rust, ruby, alacritty, mail, xorg, haskell, grep, firefox

# # PAM environment
# if is_linux;
# then
#   append_to_file "pam" "pam_environment"
#   for T in ssh dbus; do append_to_file "$T" "pam_environment"; done
# fi

# # XDG
# is_not_mac && append_to_file "xdg" "user-dirs.dirs" "$BUILD_CONFIG_DIR/user-dirs.dirs"

# # Xorg
# if is_bsd || is_linux;
# then
#   D="$BUILD_CONFIG_DIR/xorg"
#   ensure_build_dir "$D"
#   for F in resources modmap; do append_to_file "xorg" "$F" "$D/$F"; done
# fi

# is_linux && install_binary "bin" "get-volume"
# install_binary "bin" "regularly-commit.sh"

# if is_linux || is_freebsd
# then
#   append_to_file "xorg" "xinitrc"
#   cd "$BUILD_DIR" || exit
#   ln -s .xinitrc .xsession
#   cd - || exit
# fi

# if is_mac;
# then
#   append_to_file "xorg" "resources" "Xresources"
#   append_to_file "xorg" "modmap" "Xmodmap"
# fi

# # Xmonad
# if is_not_mac
# then
#   ensure_build_dir ".xmonad"
#   for F in xmonad.hs xmobarrc stack.yaml build
#   do
#     append_to_file "xmonad" "$F" ".xmonad/$F"
#   done
# fi

[ -d "$DOTFILE_DIR/build.bkp" ] && rm -rf "$DOTFILE_DIR/build.bkp";
[ -d "$DOTFILE_DIR/build" ] && mv "$DOTFILE_DIR/build" "$DOTFILE_DIR/build.bkp";
mv "$BUILD_DIR" "$DOTFILE_DIR/build"

msg "Built the following dotfiles dir:"
echo ""
tree -a build

while true; do
  echo "Do you wish to install those dotfiles? Answer y or n."
  read -r yn
  case $yn in
    [Yy]* )
      find build/ | while read -r F; do
        [ -d "$F" ] && mkdir -p "$HOME/${F#build/}"
        [ -f "$F" ] && install -C -m 0644 "$F" "$HOME/${F#build/}"
        # FIXME: cp -P doesn't work on *BSD, this will instead copy the file
        #        and not the link.
        [ -L "$F" ] && cp -P "$F" "$HOME/${F#build/}"
      done
      # FIXME: Fix up some permissions. Is there a better way to use the
      #        install command?
      [ -d "$HOME/.gnupg" ] && chmod 0700 "$HOME/.gnupg"
      [ -f "$HOME/.xmonad/build" ] && chmod +x "$HOME/.xmonad/build"
      # File globbing throws an error if the directory is empty. Test if
      # $BIN_DIR has any files before expanding the directory.
      [ -n "$(ls -A $BIN_DIR)" ] && for f in "$BIN_DIR"/*; do chmod +x "$f"; done
      break
      ;;
    [Nn]* ) exit;;
    * ) echo "Please answer yes or no.";;
  esac
done

# # Xmonad
# git_clone_or_pull_tag https://github.com/xmonad/xmonad.git "$XMONAD_DIR/xmonad-git"
# git_clone_or_pull_tag https://github.com/xmonad/xmonad-contrib.git "$XMONAD_DIR/xmonad-contrib-git"
# git_clone_or_pull_tag https://github.com/jaor/xmobar.git "$XMONAD_DIR/xmobar-git"
