{{- if eq .chezmoi.os "darwin" }}
# Setup Homebrew
eval "$(/opt/homebrew/bin/brew shellenv)"
{{- end }}

# Configure the ZSH plugin management
{{- if eq .chezmoi.os "darwin" }}
export ZSH="$HOME/Library/Preferences/sheldon/repos/github.com/ohmyzsh/ohmyzsh"
{{ else }}
export ZSH="$HOME/.local/share/sheldon/repos/github.com/ohmyzsh/ohmyzsh"
{{- end }}
eval "$(sheldon source)"

eval "$(atuin init zsh)"
eval "$(starship init zsh)"
eval "$(zoxide init zsh)"
eval "$(direnv hook zsh)"

SSH_ENV="$HOME/.ssh/environment"

ssh-add -l &>/dev/null
if [ "$?" -eq 2 ]; then
  test -r "$SSH_ENV" && \
    eval "$(<$SSH_ENV)" >/dev/null

  ssh-add -l &>/dev/null
  if [ "$?" -eq 2 ]; then
    (umask 066; ssh-agent > "$SSH_ENV")
    eval "$(<$SSH_ENV)" >/dev/null
    {{- if eq .chezmoi.os "darwin" }}
    ssh-add --apple-use-keychain ~/.ssh/id_ed25519
    {{ else }}
    ssh-add ~/.ssh/id_ed25519
    {{- end }}
  fi
fi

export PYENV_ROOT="$HOME/.pyenv"
[[ -d $PYENV_ROOT/bin ]] && export PATH="$PYENV_ROOT/bin:$PATH"
eval "$(pyenv init -)"
eval "$(pyenv virtualenv-init -)"

[ -f $HOME/.cargo/env ] && source $HOME/.cargo/env

export NVM_DIR="$([ -z "${XDG_CONFIG_HOME-}" ] && printf %s "${HOME}/.nvm" || printf %s "${XDG_CONFIG_HOME}/nvm")"
[ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"

export PATH="$HOME/.cask/bin:$HOME/.local/bin:$PATH:./node_modules/.bin:/usr/local/sbin"
export BAT_THEME="zenburn"

if type brew &>/dev/null
then
  FPATH="$(brew --prefix)/share/zsh/site-functions:${FPATH}"

  autoload -Uz compinit
  compinit
fi

export LC_ALL=
export LANG=en_US.UTF-8
export LESS='--ignore-case --raw-control-chars'
export PAGER='less'
export EDITOR='emacsclient'
export GREP_COLOR='3;33'
export HISTSIZE=50000
export HSAVEHIST=50000
export HHIST_STAMPS="dd-mm-yyyy"
export GPG_TTY=$(tty)
{{- if eq .chezmoi.os "darwin" }}
export XDG_CONFIG_HOME=~/Library/Preferences/
export XDG_CACHE_HOME=~/Library/Caches/
export XDG_DATA_HOME=~/Library/
export XDG_RUNTIME_DIR=/tmp/
export CLICOLOR=1
export LSCOLORS="exfxcxdxbxbxbxbxbxbxbx"
export LS_COLORS="di=34;40:ln=35;40:so=32;40:pi=33;40:ex=31;40:bd=31;40:cd=31;40:su=31;40:sg=31;40:tw=31;40:ow=31;40:"
{{- end }}

# Prefer our own version of md over the alias that comes with oh-my-zsh.
unalias md

alias pwd='pwd | sed -e "s,^$HOME,~,"'

# cd
alias -g ...='../..'
alias -g ....='../../..'
alias -g .....='../../../..'
alias -g ......='../../../../..'

alias -- -='cd -'
alias 1='cd -'
alias 2='cd -2'
alias 3='cd -3'
alias 4='cd -4'
alias 5='cd -5'
alias 6='cd -6'
alias 7='cd -7'
alias 8='cd -8'
alias 9='cd -9'

# Push and pop directories on directory stack
alias pu='pushd'
alias po='popd'

# Format kernel log timestamps nicely
# alias dmesg='dmesg -H'
# alias dmesg='dmesg -T'

# Show history
case $HIST_STAMPS in
  "mm/dd/yyyy") alias history='fc -fl 1' ;;
  "dd.mm.yyyy") alias history='fc -El 1' ;;
  "yyyy-mm-dd") alias history='fc -il 1' ;;
  *) alias history='fc -l 1' ;;
esac

# commands starting with % for pasting from web
# alias %=' '

alias clr='clear'

alias _='sudo'
alias please='sudo'

# ls
# if is_mac; then
#   alias ls='ls -F -G'
# else
#   alias ls='ls -F --color=auto'
# fi
# alias l='ls -lAh'
# alias ll='ls -lh'
# alias lt='l -t'

# ls
{{- if eq .chezmoi.os "darwin" }}
alias ls='ls -F -G'
{{ else }}
alias ls='ls -F --color=auto'
{{- end }}
alias l='eza -l'
alias la='eza -la'
alias lt='eza -l -snew'
alias ls='ls -F -G'

alias g='git'
alias e='emacsclient -t'

{{- if eq .chezmoi.os "linux" }}
alias grep="grep --color=auto --exclude-dir={.bzr,CVS,.git,.hg,.svn}"
{{- end }}
### Predicates
_is_os() { [[ $(uname) == $1 ]] }
_has_cmd() { [[ -n ${commands[$1]} ]] }

is_mac() { _is_os "Darwin" }
is_freebsd() { _is_os "FreeBSD" }
is_linux() { _is_os "Linux" }

has_brew() { _has_cmd brew}
has_apt() { _has_cmd apt }
has_pacman() { _has_cmd pacman }

has_function() { whence -w $1 >/dev/null }

# Create a new directory and enter it.
md() { mkdir -p "$@" && cd "$@" }

# Git commmit browser
log() {
  git log --graph --color=always \
       --format="%C(auto)%h%d %s %C(black)%C(bold)%cr" "$@" |
  fzf --ansi --no-sort --reverse --tiebreak=index --toggle-sort=\` \
      --bind "ctrl-m:execute:
                echo '{}' | grep -o '[a-f0-9]\{7\}' | head -1 |
                xargs -I % sh -c 'git show --color=always % | less -R'"
}

# Use: scaffold critocrito/elisp-lib-scaffold ava.el
#      scaffold critocrito/nodejs-lib-scaffold rrb-trees
scaffold() {
  # Scaffold project based on repo
  # $1 - $GITREMOTE
  # $2 - $FOLDER_NAME
  GITREMOTE=$1
  # Handle username/reponame case
  if [[ "$1" =~ ^[A-Za-z0-9_-]+\/[A-Za-z0-9_-]+$ ]]
  then
    GITREMOTE="https://github.com/$1.git"
  fi
  # capture PROJECT_NAME part of git link (right before .git)
  REGEX="([A-Za-z0-9_-]+).git$"
  [[ "$GITREMOTE" =~ $REGEX  ]];
  SCAFFOLD_NAME="${match}"
  # use provided folder name with fallback to project name
  FOLDER_NAME="${2:-$SCAFFOLD_NAME}"
  PROJECT_NAME="${FOLDER_NAME%.*}"
  git clone --depth 1 $GITREMOTE $FOLDER_NAME
  cd $_
  rm -rf .git
  git init
  git commit -m "Initial commit." --allow-empty
  if is_mac
  then
    find . -type f | grep -v "^\.\/\.git" | xargs sed -i '' -e "s/$SCAFFOLD_NAME/$PROJECT_NAME/g"
  fi
  if is_linux
  then
    find . -type f | grep -v "^\.\/\.git" | xargs sed -i -e "s/$SCAFFOLD_NAME/$PROJECT_NAME/g"
  fi
  GLOB_SCAFFOLD_NAME="*${SCAFFOLD_NAME}*"
  find . -type f -name $GLOB_SCAFFOLD_NAME -print0 |
    while IFS= read -r -d $'\0' line; do
      target=$(echo $line | sed -e "s/$SCAFFOLD_NAME/$PROJECT_NAME/")
      mv $line $target
    done
  git add -A
  git commit -m "Initial import."
  git remote add origin gh:critocrito/${FOLDER_NAME}.git
}

man ()
{
  if [ "$TERM" = "eterm-color" ]; then
    emacsclient -t -a emacs -e "(man \"$1\")";
  else
    command man "$@";
  fi
}

# Start a webserver, optionally specifying a port
s_http() {
  local port="${1:-8000}"
  python3 -m http.server $port
}
