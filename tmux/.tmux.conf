# Remap Ctrl-b
unbind C-b
set -g prefix C-q
bind C-q send-prefix

set -sg escape-time 0
# Ring the bell if any background window rang a bell
set -g bell-action any

# Default termtype. If the rcfile sets $TERM, that overrides this value.
set -g default-terminal screen-256color

# Pass these keys through to its terminals
set-window-option -g xterm-keys on

# Watch for activity in background windows
setw -g monitor-activity on
set -g visual-activity off

# Mark the active pane clearly
set-option -g pane-active-border-fg red

# Automatically set window title
setw -g automatic-rename

# Only resize the window if the smallest client is actively lookings at it
# setw -g aggressive-resize on

# set the window name
set-option -g set-titles on
set-option -g set-titles-string '[#S:#I #H] #W'

#--Key-Bindings-----------------------------------------------------------------
# more intuitive split keys
bind | split-window -h
bind - split-window -v

# Keep your finger on ctrl, or don't
# bind-key ^D detach-client
# bind-key ^C new-window

# Create splits and vertical splits
bind-key v split-window -h
# bind-key ^V split-window -h
bind-key h split-window
# bind-key ^S split-window

# Pane resize in all four directions using vi bindings.
# Can use these raw but I map them to Cmd-Opt-<h,j,k,l> in iTerm2.
# http://tangledhelix.com/blog/2012/04/28/iterm2-keymaps-for-tmux/
unbind Left
unbind Right
unbind Down
unbind Up
bind-key -r Down resize-pane -D 4
bind-key -r Up resize-pane -U 4
bind-key -r Left resize-pane -L 4
bind-key -r Right resize-pane -R 4

bind-key j previous-window

# Use vi keybindings for tmux commandline input.
# Note that to get command mode you need to hit ESC twice...
set -g status-keys vi

# Use vi keybindings in copy and choice modes
setw -g mode-keys vi

# Vim-style copy/paste
# unbind [
# unbind p
# bind C-y copy-mode
# bind p paste-buffer
bind -t vi-copy v begin-selection
bind -t vi-copy V rectangle-toggle
bind -t vi-copy y copy-selection
bind -t vi-copy Escape cancel
# buffer
bind Space choose-buffer
# To copy:
bind-key -n -t vi-copy M-w copy-pipe "xclip -i -sel p -f | xclip -i -sel c"
# To paste:
bind-key -n C-y run "xclip -o | tmux load-buffer - ; tmux paste-buffer"

# easily toggle synchronization (mnemonic: e is for echo)
# sends input to all panes in a given window.
bind e setw synchronize-panes on
bind E setw synchronize-panes off

# set first window to index 1 (not 0) to map more to the keyboard layout...
set -g base-index 1

# + and - "zoom" and "unzoom" a pane.
# + breaks a pane out to its own window
# - restores a broken-out pane to being a pane

unbind +
bind + \
  new-window -d -n tmux-zoom 'clear && echo TMUX ZOOM && read' \;\
  swap-pane -s tmux-zoom.0 \;\
  select-window -t tmux-zoom

unbind -
bind - \
  last-window \;\
  swap-pane -s tmux-zoom.0 \;\
  kill-window -t tmux-zoom

# reload tmux config
unbind r
bind r \
  source-file ~/.tmux.conf \;\
  display 'Reloaded tmux config.'

# Those options throw an error
# set -g mode-mouse on
# set -g mouse-resize-pane on
# set -g mouse-select-pane on
# set -g mouse-select-window on

# Toggle mouse on
bind m \
  set -g mode-mouse on \;\
  set -g mouse-resize-pane on \;\
  set -g mouse-select-pane on \;\
  set -g mouse-select-window on \;\
  display 'Mouse: ON'

# Toggle mouse off
bind M \
  set -g mode-mouse off \;\
  set -g mouse-resize-pane off \;\
  set -g mouse-select-pane off \;\
  set -g mouse-select-window off \;\
  display 'Mouse: OFF'

# pass through xterm keys
set -g xterm-keys on

# pane movement
bind-key j command-prompt -p "join pane from:"  "join-pane -hs '%%'"
bind-key s command-prompt -p "send pane to:"  "join-pane -ht '%%'"

#--Status-Bar-------------------------------------------------------------------
# color scheme (style based on vim-powerline)
set -g status-left-length 52
set -g status-right-length 451
set -g status-fg white
set -g status-bg colour234
set -g window-status-activity-attr bold
set -g pane-border-fg colour245
set -g pane-active-border-fg colour46
set -g message-fg colour16
set -g message-bg colour221
set -g message-attr bold
#set -g status-left '#[fg=colour235,bg=colour252,bold] ❐ #S #[fg=colour252,bg=colour238,nobold]⮀#[fg=colour245,bg=colour238,bold] #(whoami) #[fg=colour238,bg=colour234,nobold]⮀'
set -g status-left '#[fg=colour238,bg=colour234,nobold]'
set -g window-status-format "#[fg=white,bg=colour234] #I: #W "
# set -g window-status-current-format "#[fg=colour234,bg=colour39]⮀#[fg=colour25,bg=colour39,noreverse,bold] #I ⮁ #W #[fg=colour39,bg=colour234,nobold]⮀"
set -g window-status-current-format "#[fg=colour220,bg=colour234]<<#[fg=colour236,bg=colour220,noreverse,bold] #I: #W #[fg=colour220,bg=colour234,nobold]>>"

# Make the active pane more visible
set -g pane-border-bg default
set -g pane-border-fg colour245
set -g pane-active-border-bg default
set -g pane-active-border-fg colour46

# Make the active window's name stand out
setw -g window-status-current-fg brightwhite
setw -g window-status-current-bg black

# Use color to indicate activity in a background window
# (Note this is inverted, fg means bg and vice versa.)
setw -g window-status-activity-fg white
setw -g window-status-activity-bg brightred

#urxvt tab like window switching (-n: no prior escape seq)
bind -n S-down new-window
bind -n S-left prev
bind -n S-right next
bind -n C-left swap-window -t -1
bind -n C-right swap-window -t +1

# cycle pane splitting
# bind-key 2 select-layout even-vertical
# bind-key 3 select-layout even-horizontal
bind-key Space next-layout

# --- colors (solarized dark)
# default statusbar colors
# set -g status-bg black
# set -g status-fg yellow
# set -g status-attr default

# # default window title colors
# setw -g window-status-fg brightblue
# setw -g window-status-bg default

# # active window title colors
# setw -g window-status-current-fg yellow
# setw -g window-status-current-bg default
# setw -g window-status-current-attr dim
